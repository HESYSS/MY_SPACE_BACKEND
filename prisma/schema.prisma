// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Item {
  id              Int            @id @default(autoincrement())
  crmId           String         @unique
  status          String?
  title           String?
  description     String?
  deal            String?
  type            String?
  isNewBuilding   Boolean?
  isOutOfCity     Boolean?
  article         String?
  category        String?
  newbuildingName String?
  createdAt       DateTime?
  updatedAt       DateTime?

  location        Location?
  characteristics Characteristic[]
  prices          Price[]
  images          Image[]
  contacts        Contact[]
  metros          Metro[]
}

model Location {
  id         Int     @id @default(autoincrement())
  itemId     Int     @unique
  country    String?
  region     String?
  city       String?
  borough    String?
  district   String?
  street     String?
  streetType String?
  lat        Float?
  lng        Float?

  item       Item    @relation(fields: [itemId], references: [id])
}

model Metro {
  id       Int    @id @default(autoincrement())
  itemId   Int
  name     String
  distance Int

  item     Item   @relation(fields: [itemId], references: [id])

  @@index([itemId, distance])
}

model Characteristic {
  id         Int     @id @default(autoincrement())
  itemId     Int
  key        String?
  value      Float?
  label      String?
  extraValue String?

  item       Item    @relation(fields: [itemId], references: [id])
  @@index([itemId, key])
}

model Price {
  id       Int     @id @default(autoincrement())
  itemId   Int
  value    Float
  currency String  @default("USD")

  item     Item    @relation(fields: [itemId], references: [id])
  @@index([value])
}

model Image {
  id       Int     @id @default(autoincrement())
  itemId   Int
  url      String
  order    Int     @default(0) // порядок отображения
  isActive Boolean @default(true) // видимость для админа

  item     Item    @relation(fields: [itemId], references: [id])

  @@index([itemId, order])
}

model Contact {
  id     Int     @id @default(autoincrement())
  itemId Int
  name   String?
  phone  String?
  email  String?

  item   Item    @relation(fields: [itemId], references: [id])
}

model Employee {
  id              Int     @id @default(autoincrement())
  firstName       String
  lastName        String
  position        String
  experienceYears Int?
  profile         String?
  aboutMe         String?
  firstNameEn     String?
  lastNameEn      String?
  positionEn      String?
  profileEn       String?
  aboutMeEn       String?
  isPARTNER       Boolean @default(false)
  isMANAGER       Boolean @default(false)
  isACTIVE        Boolean @default(false)
}

model Offer {
  id          Int                 @id @default(autoincrement())
  clientName  String
  reason      OfferReason
  propertyType OfferPropertyType
  phoneNumber String
  createdAt   DateTime            @default(now())
  status      OfferStatus         @default(PENDING)
}

enum OfferReason {
  BUYING
  SELLING
}

enum OfferPropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
}

enum OfferStatus {
  PENDING      // Не рассмотрен
  PROCESSED    // Обработан
  COMPLETED    // Закончен
}