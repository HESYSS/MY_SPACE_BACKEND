// src/crm/crm.service.ts
import { Injectable } from "@nestjs/common";
import axios from "axios";
import * as xml2js from "xml2js";
import { CrmItemDto } from "./dto/crm-item.dto";
import { PrismaService } from "../prisma/prisma.service";
import { TranslateService } from "../translate/translate.service";

@Injectable()
export class CrmService {
  private dailyFeedUrl =
    "https://crm-myspace.realtsoft.net/feed/json?id=3&updates=day";
  private fullFeedUrl =
    "https://crm-myspace.realtsoft.net/feed/json?id=3&updates=all";

  private lastFullSync = 0;

  constructor(
    private prisma: PrismaService,
    private translateService: TranslateService // <--
  ) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
    this.startAutoTranslate();
  }
  private dtoContainer: CrmItemDto[] = [];

  exchangeRatesCache: {
    [currency: string]: { rate: number; lastUpdated: number };
  } = {
    USD: { rate: 1, lastUpdated: 0 }, // –¥–æ–ª–ª–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    EUR: { rate: 0, lastUpdated: 0 }, // –µ–≤—Ä–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è
    UAH: { rate: 0, lastUpdated: 0 }, // –≥—Ä–∏–≤–Ω–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è
  };

  private async updateRates(): Promise<void> {
    const now = Date.now();
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
    for (const currency of ["USD", "EUR", "UAH"]) {
      if (
        now - (this.exchangeRatesCache[currency]?.lastUpdated || 0) >
        60 * 60 * 1000
      ) {
        try {
          const res = await axios.get(
            `https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode=${currency}&json`
          );
          const rate = res.data?.[0]?.rate;
          if (rate) {
            this.exchangeRatesCache[currency] = { rate, lastUpdated: now };
          }
        } catch (e: any) {
          console.error(
            `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${currency} –æ—Ç –ù–ë–£:`,
            e.message
          );
        }
      }
    }
  }

  // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª—é–±—É—é –≤–∞–ª—é—Ç—É –≤ USD
  async toUsd(value: number, currency: string): Promise<number> {
    if (currency === "USD") return Math.round(value * 100) / 100;

    await this.updateRates();

    let result = value;

    if (currency === "UAH") {
      result = value / this.exchangeRatesCache["USD"].rate; // UAH ‚Üí USD
    } else if (currency === "EUR") {
      const eurRate = this.exchangeRatesCache["EUR"].rate; // EUR ‚Üí UAH
      const usdRate = this.exchangeRatesCache["USD"].rate; // USD ‚Üí UAH
      result = (value * eurRate) / usdRate; // EUR ‚Üí USD
    }

    // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return Math.round(result * 100) / 100;
  }

  public pushDto(dto: CrmItemDto | CrmItemDto[]) {
    if (Array.isArray(dto)) {
      this.dtoContainer.push(...dto);
    } else {
      this.dtoContainer.push(dto);
    }
  }

  private async startAutoTranslate() {
    const interval = 5000; // –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

    const checkAndTranslate = async () => {
      if (this.dtoContainer.length === 0) {
        setTimeout(checkAndTranslate, interval);
        return;
      }

      try {
        await this.translateAndSave();
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:", err);
      }

      // –∂–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      setTimeout(checkAndTranslate, interval);
    };

    // –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑
    checkAndTranslate();
  }

  private async translateAndSave(): Promise<void> {
    if (!this.dtoContainer.length) {
      return;
    }

    for (const dto of this.dtoContainer) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
      const hasTextToTranslate =
        dto.title ||
        dto.description ||
        dto.deal ||
        dto.type ||
        dto.category ||
        dto.newbuilding_name ||
        (dto.location &&
          (dto.location.country ||
            dto.location.region ||
            dto.location.city ||
            dto.location.county ||
            dto.location.borough ||
            dto.location.district ||
            dto.location.street ||
            dto.location.street_type)) ||
        (dto.location?.metros?.length ?? 0) > 0 ||
        (dto.characteristics && Object.keys(dto.characteristics).length > 0);

      if (!hasTextToTranslate) continue;

      // –ü–µ—Ä–µ–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
      const [titleEn, descriptionEn, typeEn, newbuildingNameEn] =
        await Promise.all([
          dto.title ? this.translateService.translateText(dto.title, "en") : "",
          dto.description
            ? this.translateService.translateText(dto.description, "en")
            : "",
          dto.type ? this.translateService.translateText(dto.type, "en") : "",

          dto.newbuilding_name
            ? this.translateService.translateText(dto.newbuilding_name, "en")
            : "",
        ]);

      // –ü–µ—Ä–µ–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏
      const locationEn: Partial<Record<string, string>> = {};
      if (dto.location) {
        const locFields: (keyof typeof dto.location)[] = [
          "county",
          "borough",
          "district",
          "street",
        ];
        const mapField = (f: string) =>
          f === "street_type" ? "streetType" : f;

        await Promise.all(
          locFields.map(async (f) => {
            const value = dto.location?.[f];
            if (typeof value === "string" && value.trim()) {
              const key = mapField(f) + "En";
              locationEn[key] = await this.translateService.translateText(
                value,
                "en"
              );
            }
          })
        );
      }

      // –ú–µ—Ç—Ä–æ

      // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const characteristicsWithTranslations = await Promise.all(
        [
          ...Object.entries(dto.characteristics || {})
            .filter(
              ([key]) =>
                key !== "extra" && dto.characteristics[key] !== undefined
            )
            .map(([key, value]) => ({ key, value: String(value) })),
          ...(dto.characteristics?.extra?.map((e) => ({
            key: e.label,
            value: e.value,
          })) || []),
        ].map(async (c) => ({
          key: c.key,

          valueEn: c.value
            ? await this.translateService.translateText(c.value, "en")
            : "",
        }))
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      await this.prisma.item.update({
        where: { crmId: dto.id },
        data: {
          titleEn,
          descriptionEn,
          typeEn,
          newbuildingNameEn,
          location: dto.location
            ? {
                update: locationEn,
              }
            : undefined,

          characteristics: {
            updateMany: characteristicsWithTranslations.map((c) => ({
              where: { key: c.key, itemId: Number(dto.id) },
              data: { valueEn: c.valueEn },
            })),
          },
        },
      });
    }

    // –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    this.dtoContainer = [];
  }

  private generateSlug(title: string, id: number): string {
    const map: { [key: string]: string } = {
      –∞: "a",
      –±: "b",
      –≤: "v",
      –≥: "g",
      –¥: "d",
      –µ: "e",
      —ë: "e",
      –∂: "zh",
      –∑: "z",
      –∏: "i",
      –π: "y",
      –∫: "k",
      –ª: "l",
      –º: "m",
      –Ω: "n",
      –æ: "o",
      –ø: "p",
      —Ä: "r",
      —Å: "s",
      —Ç: "t",
      —É: "u",
      —Ñ: "f",
      —Ö: "kh",
      —Ü: "ts",
      —á: "ch",
      —à: "sh",
      —â: "shch",
      —ä: "",
      —ã: "y",
      —å: "",
      —ç: "e",
      —é: "yu",
      —è: "ya",
      –ê: "A",
      –ë: "B",
      –í: "V",
      –ì: "G",
      –î: "D",
      –ï: "E",
      –Å: "E",
      –ñ: "Zh",
      –ó: "Z",
      –ò: "I",
      –ô: "Y",
      –ö: "K",
      –õ: "L",
      –ú: "M",
      –ù: "N",
      –û: "O",
      –ü: "P",
      –†: "R",
      –°: "S",
      –¢: "T",
      –£: "U",
      –§: "F",
      –•: "Kh",
      –¶: "Ts",
      –ß: "Ch",
      –®: "Sh",
      –©: "Shch",
      –™: "",
      –´: "Y",
      –¨: "",
      –≠: "E",
      –Æ: "Yu",
      –Ø: "Ya",
      —ñ: "i",
      —ó: "yi",
      —î: "ye",
      “ë: "g",
      –Ü: "I",
      –á: "Yi",
      –Ñ: "Ye",
      “ê: "G",
    };

    const transliterate = (text: string) =>
      text
        .split("")
        .map((c) => map[c] || c)
        .join("");

    const slugBase = transliterate(title || "")
      .toLowerCase()
      .trim()
      .replace(/[^a-z0-9\s-]/g, "")
      .replace(/\s+/g, "-")
      .replace(/--+/g, "-");

    return `${id}-${slugBase}`;
  }

  async startScheduler() {
    const intervalMs = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
    let oneParse = true;

    const run = async () => {
      try {
        const now = new Date();
        const hours = now.getHours() + 3;

        const isNightTime = hours === 3 && oneParse;
        if (isNightTime) {
          console.log("–°—Ç–∞—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞");
          await this.syncData(this.fullFeedUrl, true);
          console.log("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è CRM –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
          oneParse = false;
        } else {
          await this.syncData(this.dailyFeedUrl, false);
          console.log("–ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É", hours);
          if (hours !== 3) oneParse = true;
        }
      } catch (e: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CRM:", e.message);
      } finally {
        setTimeout(run, intervalMs);
      }
    };

    run();
  }

  /**
   * üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å CRM
   */
  async syncData(url: string, isFullSync: boolean): Promise<void> {
    const response = await axios.get(url, { timeout: 30000 });
    const data = response.data;

    if (!data || !Array.isArray(data.estates)) {
      console.error("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ 'estates'");
      return;
    }

    const items = data.estates.map((item: any) => item);

    const seenCrmIds: string[] = [];

    for (const raw of items) {
      const dto = this.mapJsonItemToDto(raw);

      seenCrmIds.push(dto.id);

      const filteredImages = dto.images.filter((url): url is string => !!url);

      // 2Ô∏è‚É£ –ë–µ—Ä—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ item
      const existingImages = await this.prisma.image.findMany({
        where: { item: { crmId: dto.id } },
        select: { url: true },
      });

      const existingUrls = new Set(existingImages.map((i) => i.url));

      // 3Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const newImages = filteredImages
        .filter((url) => !existingUrls.has(url))
        .map((url, index) => ({
          url,
          order: index,
        }));

      const priceUsd = await this.toUsd(dto.price.value, dto.price.currency);

      await this.prisma.item.upsert({
        where: { crmId: dto.id },
        update: {
          status: dto.status,
          title: dto.title,
          description: dto.description,
          deal: dto.deal,
          type: dto.type,
          isNewBuilding: Boolean(dto.is_new_building),
          isOutOfCity: dto.isOutOfCity,
          article: dto.article,
          category: dto.category,
          newbuildingName: dto.newbuilding_name,
          updatedAt: new Date(dto.updatedAt),
          location: dto.location
            ? {
                upsert: {
                  update: {
                    country: dto.location.country,
                    region: dto.location.region,
                    city: dto.location.city,
                    borough: dto.location.borough,
                    district: dto.location.district,
                    county: dto.location.county || null,
                    street: dto.location.street || null,
                    streetType: dto.location.street_type || null,
                    lat: dto.location.lat,
                    lng: dto.location.lng,
                  },
                  create: {
                    country: dto.location.country,
                    region: dto.location.region,
                    city: dto.location.city,
                    borough: dto.location.borough,
                    district: dto.location.district,
                    street: dto.location.street || null,
                    streetType: dto.location.street_type || null,
                    lat: dto.location.lat,
                    lng: dto.location.lng,
                  },
                },
              }
            : undefined,

          prices: dto.price
            ? {
                upsert: {
                  update: {
                    value: dto.price.value,
                    currency: dto.price.currency,
                    priceUsd,
                  },
                  create: {
                    value: dto.price.value,
                    currency: dto.price.currency,
                    priceUsd,
                  },
                },
              }
            : undefined,
          contacts: dto.contact
            ? {
                upsert: {
                  update: {
                    name: dto.contact.name,
                    phone: dto.contact.phone,
                    email: dto.contact.email,
                  },
                  create: {
                    name: dto.contact.name,
                    phone: dto.contact.phone,
                    email: dto.contact.email,
                  },
                },
              }
            : undefined,
          images: {
            // 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Å—ë, —á–µ–≥–æ –Ω–µ—Ç –≤ dto.images
            deleteMany: {
              itemId: Number(dto.id),
              NOT: {
                url: { in: dto.images.filter(Boolean) },
              },
            },

            // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ
            create: newImages.length
              ? newImages.map((img) => ({
                  url: img.url,
                  order: img.order,
                }))
              : undefined,
          },

          metros: {
            deleteMany: {}, // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ
            create:
              dto.location.metros?.map((m) => ({
                name: m.name,
                distance: m.distance,
              })) || [],
          },
          characteristics: {
            deleteMany: {},
            create: [
              ...Object.entries(dto.characteristics)
                .filter(
                  ([key]) =>
                    key !== "extra" && dto.characteristics[key] !== undefined
                )
                .map(([key, value]) => {
                  const num = Number(value);
                  return {
                    key,
                    value: String(value),
                    valueNumeric: isNaN(num) ? null : num,
                  };
                }),
              ...(dto.characteristics.extra?.map((e) => {
                const num = Number(e.value);
                return {
                  key: e.label,
                  value: e.value,
                  valueNumeric: isNaN(num) ? null : num,
                };
              }) || []),
            ],
          },
          slug: this.generateSlug(dto.title || "", Number(dto.id)),
        },

        create: {
          crmId: dto.id,
          status: dto.status,
          title: dto.title,
          description: dto.description,
          deal: dto.deal,
          type: dto.type,
          isNewBuilding: Boolean(dto.is_new_building),
          isOutOfCity: dto.isOutOfCity,
          article: dto.article,
          category: dto.category,
          newbuildingName: dto.newbuilding_name,
          createdAt: new Date(dto.createdAt),
          updatedAt: new Date(dto.updatedAt),
          location: dto.location
            ? {
                create: {
                  country: dto.location.country,
                  region: dto.location.region,
                  city: dto.location.city,
                  borough: dto.location.borough,
                  county: dto.location.county || null,
                  district: dto.location.district,
                  street: dto.location.street || null,
                  streetType: dto.location.street_type || null,
                  lat: dto.location.lat,
                  lng: dto.location.lng,
                },
              }
            : undefined,

          prices: dto.price
            ? {
                create: {
                  value: dto.price.value,
                  currency: dto.price.currency,
                  priceUsd,
                },
              }
            : undefined,
          contacts: dto.contact
            ? {
                create: {
                  name: dto.contact.name,
                  phone: dto.contact.phone,
                  email: dto.contact.email,
                },
              }
            : undefined,
          images: dto.images.length
            ? {
                create: dto.images.map((url, index) => ({
                  url,
                  order: index,
                })),
              }
            : undefined,
          metros: dto.location.metros?.length
            ? {
                create: dto.location.metros.map((m) => ({
                  name: m.name,
                  distance: m.distance,
                })),
              }
            : undefined,
          characteristics: {
            create: [
              // –æ–±—ã—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              ...Object.entries(dto.characteristics)
                .filter(
                  ([key]) =>
                    key !== "extra" && dto.characteristics[key] !== undefined
                )
                .map(([key, value]) => {
                  const num = Number(value);
                  return {
                    key,
                    value: String(value),
                    valueNumeric: isNaN(num) ? null : num,
                  };
                }),

              // extra —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–∂–µ –≤ key/value
              ...(dto.characteristics.extra?.map((e) => {
                const num = Number(e.value);
                return {
                  key: e.label,
                  value: e.value,
                  valueNumeric: isNaN(num) ? null : num,
                };
              }) || []),
            ],
          },
          slug: this.generateSlug(dto.title || "", Number(dto.id)),
        },
      });
    }

    if (isFullSync) {
      const existing = await this.prisma.item.findMany({
        select: { crmId: true },
      });
      const toDelete = existing
        .map((i) => i.crmId)
        .filter((id) => !seenCrmIds.includes(id));
      if (toDelete.length > 0) {
        await this.prisma.item.deleteMany({
          where: { crmId: { in: toDelete } },
        });
      }
    }
  }

  /**
   * üß© –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –æ–±—ä–µ–∫—Ç CRM –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private mapJsonItemToDto(item: any): CrmItemDto {
    const getText = (field: any): string => {
      if (field == null) return "";
      if (typeof field === "string") return field.trim();
      if (typeof field === "number") return field.toString();
      return "";
    };

    const getNumber = (field: any): number | null => {
      if (field == null || field === "") return null;
      const n = parseFloat(field);
      return isNaN(n) ? null : n;
    };

    // üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = Array.isArray(item.images)
      ? item.images
      : item.images
        ? [item.images]
        : [];

    // üß© –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    const extra =
      Array.isArray(item.properties) && item.properties.length
        ? item.properties.map((p: any) => ({
            label: p.name || "",
            value: p.value_name || p.value || "",
          }))
        : [];

    // üìç –õ–æ–∫–∞—Ü–∏—è
    const location = item.location || {};
    const metros = Array.isArray(location.metros)
      ? location.metros.map((m: any) => ({
          name: getText(m.name),
          distance: getNumber(m.distance) || 0,
        }))
      : [];

    const characteristics: Record<string, any> = {};
    for (const key in item) {
      if (
        key.includes("area") ||
        key.includes("floor") ||
        key.includes("room")
      ) {
        characteristics[key] = getNumber(item[key]);
      }
    }
    characteristics.extra = extra;

    const phones =
      item.user?.properties?.find(
        (p: any) => p.name === "–†–æ–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª. (—Å–∞–π—Ç)"
      )?.value || "";
    const county = location?.county;
    const isOutOfCity = !county;

    return {
      id: item.id?.toString() || "",
      status: item.status || "active",
      title: getText(item.title),
      description: getText(item.description),
      deal: getText(item.deal?.name),
      type: getText(item.realty_type?.name),
      is_new_building: item.is_new_building
        ? parseInt(item.is_new_building)
        : null,
      isOutOfCity, // <- –ø–æ–ª–µ –∫–∞–∫ –≤ XML-–≤–µ—Ä—Å–∏–∏
      article: getText(item.article),
      category: getText(item.category?.name),
      newbuilding_name: getText(item.newbuilding_name),
      location: {
        country: getText(location.country?.name),
        region: getText(location.region?.name),
        city: getText(location.city?.name),
        borough: getText(location.borough?.name),
        district: getText(location.district?.name),
        street: getText(location.street?.name),
        county: county ? getText(county.name) : undefined,
        street_type: getText(location.street_type),
        lat: getNumber(location.map_lat) || undefined,
        lng: getNumber(location.map_lng) || undefined,
        metros,
      },
      characteristics,
      price: {
        value: getNumber(item.price?.value) || 0,
        currency: item.price?.currency || "USD",
      },
      images,
      contact: {
        name: getText(item.user?.name),
        phone: phones,
        email: getText(item.user?.email),
      },
      createdAt: item.created_at,
      updatedAt: item.updated_at,
    };
  }
}
