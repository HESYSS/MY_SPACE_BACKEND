// employee.service.ts
import {
  Injectable,
  BadRequestException,
  NotFoundException,
  InternalServerErrorException,
} from "@nestjs/common";
import { PrismaService } from "../prisma/prisma.service";
import { Employee } from "@prisma/client";
import { CreateEmployeeDto } from "./dto/CreateEmployee.dto";
// –î–æ–±–∞–≤–ª—è–µ–º DeleteObjectCommand –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
import {
  S3Client,
  PutObjectCommand,
  DeleteObjectCommand,
} from "@aws-sdk/client-s3";
import { randomUUID } from "crypto";
import path from "path";
import * as fs from "fs";

@Injectable()
export class EmployeeService {
  private readonly r2Client: S3Client;
  private readonly R2_BUCKET_NAME = process.env.R2_BUCKET_NAME;
  private readonly R2_PUBLIC_URL = process.env.R2_PUBLIC_URL;

  constructor(private prisma: PrismaService) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Cloudflare R2
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª)
    if (
      !process.env.R2_ACCESS_KEY_ID ||
      !process.env.R2_SECRET_ACCESS_KEY ||
      !process.env.R2_ENDPOINT
    ) {
      throw new InternalServerErrorException(
        "Missing R2 environment variables. Please check your .env file."
      );
    }

    this.r2Client = new S3Client({
      region: "auto", // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
      endpoint: process.env.R2_ENDPOINT,
      credentials: {
        accessKeyId: process.env.R2_ACCESS_KEY_ID,
        secretAccessKey: process.env.R2_SECRET_ACCESS_KEY,
      },
    });
  } // –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π

  async createEmployee(
    data: CreateEmployeeDto, // üí° –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–µ–ª–∞–µ–º file –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    file?: Express.Multer.File
  ): Promise<Employee> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if (data.isPARTNER && data.isMANAGER && data.isSUPERVISOR) {
      throw new BadRequestException(
        "An employee cannot be both a partner and a manager simultaneously."
      );
    } // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    const partnerCount = await this.prisma.employee.count({
      where: { isPARTNER: true },
    });
    const managerCount = await this.prisma.employee.count({
      where: { isSUPERVISOR: true },
    });
    const activeCount = await this.prisma.employee.count({
      where: { isACTIVE: true },
    });

    if (data.isPARTNER && partnerCount >= 6) {
      throw new BadRequestException("Cannot add more than 6 partners.");
    }
    if (data.isSUPERVISOR && managerCount >= 6) {
      throw new BadRequestException("Cannot add more than 6 supervisors.");
    }
    if (data.isACTIVE && activeCount >= 8) {
      throw new BadRequestException("Cannot add more than 8 active employees.");
    }

    let photoUrl: string;

    if (file) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ
      const fileName = `${randomUUID()}-${file.originalname}`;

      const uploadCommand = new PutObjectCommand({
        Bucket: this.R2_BUCKET_NAME,
        Key: fileName,
        Body: file.buffer,
        ContentType: file.mimetype,
      });

      try {
        await this.r2Client.send(uploadCommand);
        photoUrl = `${this.R2_PUBLIC_URL}/${fileName}`;
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ R2:", error);
        throw new InternalServerErrorException(
          "Failed to upload employee photo."
        );
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ R2
      const defaultFilePath = path.join(
        __dirname,
        "../assets/default-avatar.png"
      );
      const defaultBuffer = fs.readFileSync(defaultFilePath);
      const fileName = `${randomUUID()}-default-avatar.png`;

      const uploadCommand = new PutObjectCommand({
        Bucket: this.R2_BUCKET_NAME,
        Key: fileName,
        Body: defaultBuffer,
        ContentType: "image/png",
      });

      try {
        await this.r2Client.send(uploadCommand);
        photoUrl = `${this.R2_PUBLIC_URL}/${fileName}`;
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ R2:", error);
        throw new InternalServerErrorException(
          "Failed to upload default employee photo."
        );
      }
    }

    return this.prisma.employee.create({
      data: {
        ...data,
        photoUrl, // photoUrl –±—É–¥–µ—Ç null, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      },
    });
  }

  async updateEmployee(
    id: number,
    data: any,
    file?: Express.Multer.File
  ): Promise<Employee> {
    const employee = await this.prisma.employee.findUnique({ where: { id } });
    if (!employee) {
      throw new NotFoundException(`Employee with ID ${id} not found.`);
    }

    let photoUrl = employee.photoUrl;

    // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π
    if (file) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
      if (employee.photoUrl) {
        const oldFileName = employee.photoUrl.substring(
          employee.photoUrl.lastIndexOf("/") + 1
        );
        try {
          await this.r2Client.send(
            new DeleteObjectCommand({
              Bucket: this.R2_BUCKET_NAME,
              Key: oldFileName,
            })
          );
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞:", err);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      const newFileName = `${randomUUID()}-${file.originalname}`;
      try {
        await this.r2Client.send(
          new PutObjectCommand({
            Bucket: this.R2_BUCKET_NAME,
            Key: newFileName,
            Body: file.buffer,
            ContentType: file.mimetype,
          })
        );
        photoUrl = `${this.R2_PUBLIC_URL}/${newFileName}`;
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", error);
        throw new InternalServerErrorException(
          "Failed to upload new employee photo."
        );
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    return this.prisma.employee.update({
      where: { id },
      data: {
        ...data,
        photoUrl,
      },
    });
  }

  async findAllEmployees(): Promise<Employee[]> {
    return this.prisma.employee.findMany();
  }

  async findEmployeeById(id: number): Promise<Employee> {
    const employee = await this.prisma.employee.findUnique({
      where: { id },
    });

    if (!employee) {
      throw new NotFoundException(`Employee with ID ${id} not found.`);
    }

    return employee;
  } // –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ú–ï–¢–û–î: —É–¥–∞–ª—è–µ—Ç –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∏ –µ–≥–æ —Ñ–æ—Ç–æ

  async deleteEmployee(id: number): Promise<Employee> {
    // 1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å URL –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const employeeToDelete = await this.prisma.employee.findUnique({
      where: { id },
    });

    if (!employeeToDelete) {
      throw new NotFoundException(`Employee with ID ${id} not found.`);
    } // 2. –ï—Å–ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—Å—Ç—å URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª

    const photoUrl = employeeToDelete.photoUrl;
    if (photoUrl) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL-–∞–¥—Ä–µ—Å–∞
      const fileName = photoUrl.substring(photoUrl.lastIndexOf("/") + 1);

      try {
        // –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∫–µ—Ç–∞
        const deleteCommand = new DeleteObjectCommand({
          Bucket: this.R2_BUCKET_NAME,
          Key: fileName,
        }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É R2 –∫–ª–∏–µ–Ω—Ç—É

        await this.r2Client.send(deleteCommand);
        console.log(`–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∫–µ—Ç–∞.`);
      } catch (error) {
        // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω),
        // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
        // —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å.
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${fileName} –∏–∑ –±–∞–∫–µ—Ç–∞:`,
          error
        );
      }
    } // 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    return this.prisma.employee.delete({
      where: { id },
    });
  }
}
