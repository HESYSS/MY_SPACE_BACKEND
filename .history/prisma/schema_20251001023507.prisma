// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Item {
  id              Int            @id @default(autoincrement())
  crmId           String         @unique
  status          String?

  // –¢–µ–∫—Å—Ç—ã
  title           String?
  titleEn         String?   // EN –ø–µ—Ä–µ–≤–æ–¥
  description     String?
  descriptionEn   String?

  // –°–¥–µ–ª–∫–∞ / —Ç–∏–ø / –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  deal            String?
  type            String?
  typeEn          String?
  category        String?

  // –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞
  newbuildingName   String?
  newbuildingNameEn String?

  // –ü—Ä–æ—á–µ–µ
  isNewBuilding   Boolean?
  isOutOfCity     Boolean?
  article         String?

  createdAt       DateTime?
  updatedAt       DateTime?

  location        Location?
  characteristics Characteristic[]
  prices  Price? @relation("ItemToPrice")
  images          Image[]
  contacts        Contact[]
  metros          Metro[]

  slug            String?   @unique   // üëà –¥–æ–±–∞–≤—å –ø–æ–ª–µ slug
}

model Location {
  id         Int     @id @default(autoincrement())
  itemId     Int     @unique

  // –õ–æ–∫–∞—Ü–∏—è
  country    String?
  region     String?
  city       String?
  county     String?
  countyEn   String?
  borough    String?
  boroughEn  String?
  district   String?
  districtEn String?
  street     String?
  streetEn   String?
  streetType String?

  lat        Float?
  lng        Float?

  item       Item    @relation(fields: [itemId], references: [id])
}

model Metro {
  id       Int    @id @default(autoincrement())
  itemId   Int

  name     String
  distance Int

  item     Item   @relation(fields: [itemId], references: [id])

  @@index([itemId, distance])
}


model Characteristic {
  id           Int    @id @default(autoincrement())
  itemId       Int
  key          String?
  value        String?
  valueEn      String?    // –ø–µ—Ä–µ–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä "—Å —Ä–µ–º–æ–Ω—Ç–æ–º")
  valueNumeric Float?

  item         Item   @relation(fields: [itemId], references: [id])
  @@index([itemId, key])
}
model Price {
  id       Int     @id @default(autoincrement())
  value    Float
  currency String  @default("USD")
  priceUsd      Float
   item     Item?   @relation(fields: [itemId], references: [id])
  itemId   Int?    @unique
  @@index([value])
}

model Image {
  id       Int     @id @default(autoincrement())
  itemId   Int
  url      String
  order    Int     @default(0) // –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  isActive Boolean @default(true) // –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–∞

  item     Item    @relation(fields: [itemId], references: [id])

  @@index([itemId, order])
}

model Contact {
  id     Int     @id @default(autoincrement())
  itemId Int
  name   String?
  phone  String?
  email  String?

  item   Item    @relation(fields: [itemId], references: [id])
}

model Employee {
  id              Int     @id @default(autoincrement())
  firstName       String
  lastName        String
  position        String
  experienceYears Int?
  profile         String?
  aboutMe         String?
  firstNameEn     String?
  lastNameEn      String?
  positionEn      String?
  profileEn       String?
  aboutMeEn       String?
  isPARTNER       Boolean @default(false)
  isMANAGER       Boolean @default(false)
  isACTIVE        Boolean @default(false)
  photoUrl        String?
}

model Offer {
  id          Int                 @id @default(autoincrement())
  clientName  String
  reason      OfferReason
  propertyType OfferPropertyType
  phoneNumber String
  createdAt   DateTime            @default(now())
  status      OfferStatus         @default(PENDING)
}

model SiteImage {
  id  Int    @id @default(autoincrement())
  name  String @unique
  url   String
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OfferReason {
  BUYING
  SELLING
}

enum OfferPropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
}

enum OfferStatus {
  PENDING      // –ù–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω
  PROCESSED    // –û–±—Ä–∞–±–æ—Ç–∞–Ω
  COMPLETED    // –ó–∞–∫–æ–Ω—á–µ–Ω
}